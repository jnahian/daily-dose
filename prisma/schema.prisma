generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Organization model
model Organization {
  id                String                @id @default(uuid())
  name              String                @unique
  slackWorkspaceId  String?               @unique @map("slack_workspace_id")
  slackWorkspaceName String?              @map("slack_workspace_name")
  defaultTimezone   String                @default("America/New_York") @map("default_timezone")
  settings          Json                  @default("{}")
  isActive          Boolean               @default(true) @map("is_active")
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")

  teams             Team[]
  members           OrganizationMember[]

  @@map("organizations")
}

// Team model
model Team {
  id              String              @id @default(uuid())
  organizationId  String              @map("organization_id")
  name            String
  slackChannelId  String              @unique @map("slack_channel_id")
  standupTime     String              @map("standup_time")
  postingTime     String              @map("posting_time")
  timezone        String              @default("America/New_York")
  isActive        Boolean             @default(true) @map("is_active")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")

  organization    Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members         TeamMember[]
  standupResponses StandupResponse[]
  standupPosts    StandupPost[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@map("teams")
}

// User model
model User {
  id              String                @id @default(uuid())
  slackUserId     String                @unique @map("slack_user_id")
  username        String?
  email           String?
  name            String?
  timezone        String                @default("America/New_York")
  workDays        Json?                 @map("work_days") // [1,2,3,4,5] for Mon-Fri, null uses org default
  createdAt       DateTime              @default(now()) @map("created_at")

  organizations   OrganizationMember[]
  teams           TeamMember[]
  leaves          Leave[]
  standupResponses StandupResponse[]

  @@map("users")
}

// Organization Member junction table
model OrganizationMember {
  id              String        @id @default(uuid())
  organizationId  String        @map("organization_id")
  userId          String        @map("user_id")
  role            OrgRole       @default(MEMBER)
  isActive        Boolean       @default(true) @map("is_active")
  joinedAt        DateTime      @default(now()) @map("joined_at")

  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@map("organization_members")
}

// Team Member junction table
model TeamMember {
  id                      String      @id @default(uuid())
  teamId                  String      @map("team_id")
  userId                  String      @map("user_id")
  role                    TeamRole    @default(MEMBER)
  isActive                Boolean     @default(true) @map("is_active")
  receiveNotifications    Boolean     @default(true) @map("receive_notifications")
  joinedAt                DateTime    @default(now()) @map("joined_at")

  team      Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

// Leave model
model Leave {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  startDate DateTime  @db.Date @map("start_date")
  endDate   DateTime  @db.Date @map("end_date")
  reason    String?   @db.VarChar(500)
  createdAt DateTime  @default(now()) @map("created_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startDate, endDate])
  @@map("leaves")
}

// Standup Response model
model StandupResponse {
  id              String    @id @default(uuid())
  teamId          String    @map("team_id")
  userId          String    @map("user_id")
  standupDate     DateTime  @db.Date @map("standup_date")
  yesterdayTasks  String?   @map("yesterday_tasks") @db.Text
  todayTasks      String?   @map("today_tasks") @db.Text
  blockers        String?   @db.Text
  hasBlockers     Boolean   @default(false) @map("has_blockers")
  submittedAt     DateTime  @default(now()) @map("submitted_at")
  isLate          Boolean   @default(false) @map("is_late")

  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId, standupDate])
  @@index([standupDate])
  @@map("standup_responses")
}

// Standup Post model
model StandupPost {
  id              String    @id @default(uuid())
  teamId          String    @map("team_id")
  standupDate     DateTime  @db.Date @map("standup_date")
  slackMessageTs  String?   @map("slack_message_ts")
  channelId       String?   @map("channel_id")
  postedAt        DateTime  @default(now()) @map("posted_at")

  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, standupDate])
  @@map("standup_posts")
}

// Holiday model
model Holiday {
  id        String    @id @default(uuid())
  date      DateTime  @db.Date
  name      String?   @db.VarChar(255)
  country   String    @default("US") @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at")

  @@unique([date, country])
  @@map("holidays")
}

// Enums
enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}

enum TeamRole {
  ADMIN
  MEMBER
}
